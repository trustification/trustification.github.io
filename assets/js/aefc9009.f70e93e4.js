"use strict";(self.webpackChunktrustification_io=self.webpackChunktrustification_io||[]).push([[4062],{1962:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>d});var t=o(8047),r=o(4848),s=o(8453);const i={title:"Continuing the Adventure with the CycloneDX Maven Plugin",authors:"kevinconner",tags:["cyclonedx"]},a="Let's Get Started",c={authorsImageUrls:[void 0]},d=[{value:"A look at Guava",id:"a-look-at-guava",level:2},{value:"A look at commons-lang3",id:"a-look-at-commons-lang3",level:2},{value:"A look at jquery",id:"a-look-at-jquery",level:2},{value:"A look at commons-io",id:"a-look-at-commons-io",level:2},{value:"Summarising the issues",id:"summarising-the-issues",level:2},{value:"Now for the solution",id:"now-for-the-solution",level:2},{value:"Recap and Solution for guava",id:"recap-and-solution-for-guava",level:3},{value:"Recap and Solution for commons-lang3",id:"recap-and-solution-for-commons-lang3",level:3},{value:"Recap and Solution for jquery",id:"recap-and-solution-for-jquery",level:3},{value:"Recap and Solution for commons-io",id:"recap-and-solution-for-commons-io",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["My investigation into the ",(0,r.jsx)(n.a,{href:"https://github.com/CycloneDX/cyclonedx-maven-plugin",title:"The CycloneDX Maven Plugin GitHub repository",children:"CycloneDX Maven Plugin"})," began back in November/December 2022 with the intent of integrating the plugin into the ",(0,r.jsx)(n.a,{href:"https://github.com/quarkusio/quarkus",title:"The Quarkus GitHub repository",children:"Quarkus"})," build process to generate Software Bill of Materials (SBOMs) for the project. I quickly discovered issues in the plugin and raised these with the maintainer early in December, writing a blog post (",(0,r.jsx)(n.a,{href:"/blog/2022/12/09/cyclonedx-maven-plugin-adventure",children:"An Adventure with the CycloneDX Maven Plugin"}),") to help clarify each issue. I finally opened a pull request in early January to move the conversation forward and this is where our story continues ....."]}),"\n",(0,r.jsxs)(n.p,{children:["Two weeks ago I received some feedback on the pull request from Steve Springett, he ran my version of the CycloneDX plugin and hit some problems. Steve was running the plugin against the ",(0,r.jsx)(n.a,{href:"https://github.com/WebGoat/WebGoat/tree/v8.0.0",children:"WebGoat 8.0.0"})," codebase and noticed some dependencies were not present in the components section! This was intriguing as I had been running the plugin against a complex codebase (",(0,r.jsx)(n.a,{href:"https://github.com/quarkusio/quarkus",title:"The Quarkus GitHub repository",children:"Quarkus"}),") without seeing the issue, and had also included a BOM validation step in my pull request which would emit ",(0,r.jsx)(n.strong,{children:"WARNING"})," log messages if this situation occurred. I took a look at the WebGoat codebase and could not get this specific version to build, however a build of a different version did succeed without displaying the problem. Curiouser and curiouser ......."]}),"\n",(0,r.jsx)(n.p,{children:"We now jump forward to this Monday (4 days ago) when I'm trying to arrange a call with Steve to discuss the differences in our environments and help move this forward. Steve suggested we include Herv\xe9 Boutemy in the call, the new maintainer of the upstream codebase, however he offered instead to review my pull request as-is. It's at this point I realised the pull request now had conflicts with the base branch, so I quickly rebased and fixed the conflicts. I also decided to give the WebGoat codebase another try."}),"\n",(0,r.jsxs)(n.p,{children:["I spent time investigating the failures I had seen with the WebGoat build and eventually realised I needed to be running on an older version of Java, I needed to install JDK8 in order to make progress. I was now able to build the same version of the code Steve had been using, although with errors, but could now see missing components. Even better, I could also see the expected ",(0,r.jsx)(n.strong,{children:"WARNING"})," messages were present!"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[WARNING] CycloneDX: Dependency missing component entry: pkg:maven/org.webjars/jquery@1.11.1?type=jar\n[WARNING] CycloneDX: Dependency missing component entry: pkg:maven/commons-io/commons-io@LATEST?type=jar\n[WARNING] CycloneDX: Dependency missing component entry: pkg:maven/com.google.guava/guava@18.0?type=jar\n[WARNING] CycloneDX: Dependency missing component entry: pkg:maven/org.apache.commons/commons-lang3@3.4?type=jar\n"})}),"\n",(0,r.jsx)(n.p,{children:"This was great, I now had something to work with."}),"\n",(0,r.jsx)(n.h1,{id:"comparing-upstream-output-with-my-pull-request",children:"Comparing Upstream Output with my pull request"}),"\n",(0,r.jsx)(n.p,{children:"Before investigating I decided to first understand the differences in output between the current upstream codebase and what was being generated by my pull request. This may provide some insight into the new issue and could possibly hint at a direction to follow."}),"\n",(0,r.jsxs)(n.p,{children:["With regard to ",(0,r.jsx)(n.strong,{children:"components"})," I discovered three were missing from my version of the bom, however in each case the component was never referenced in the dependencies section. These components were"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/com.google.guava/guava@20.0?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/commons-io/commons-io@2.11.0?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.apache.commons/commons-lang3@3.6?type=jar"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These are three of the components we were warned about, but suspiciously each has a different version."}),"\n",(0,r.jsxs)(n.p,{children:["I also found we were now including two additional ",(0,r.jsx)(n.strong,{children:"components"}),", these are"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/junit/junit@4.12?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.hamcrest/hamcrest-core@1.3?type=jar"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["With regard to ",(0,r.jsx)(n.strong,{children:"dependencies"})," we were expanding the dependency tree to include transitive dependencies for the following"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/com.fasterxml.jackson.core/jackson-databind@2.8.11.1?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework.boot/spring-",(0,r.jsx)(n.a,{href:"mailto:boot-autoconfigure@1.5.12.RELEASE",children:"boot-autoconfigure@1.5.12.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework.boot/spring-",(0,r.jsx)(n.a,{href:"mailto:boot@1.5.12.RELEASE",children:"boot@1.5.12.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework.security/spring-",(0,r.jsx)(n.a,{href:"mailto:security-core@4.2.5.RELEASE",children:"security-core@4.2.5.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework.security/spring-",(0,r.jsx)(n.a,{href:"mailto:security-web@4.2.5.RELEASE",children:"security-web@4.2.5.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework/spring-",(0,r.jsx)(n.a,{href:"mailto:aop@4.3.16.RELEASE",children:"aop@4.3.16.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework/spring-",(0,r.jsx)(n.a,{href:"mailto:beans@4.3.16.RELEASE",children:"beans@4.3.16.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework/spring-",(0,r.jsx)(n.a,{href:"mailto:context@4.3.16.RELEASE",children:"context@4.3.16.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework/spring-",(0,r.jsx)(n.a,{href:"mailto:expression@4.3.16.RELEASE",children:"expression@4.3.16.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework/spring-",(0,r.jsx)(n.a,{href:"mailto:test@4.3.16.RELEASE",children:"test@4.3.16.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.springframework/spring-",(0,r.jsx)(n.a,{href:"mailto:web@4.3.16.RELEASE",children:"web@4.3.16.RELEASE"}),"?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.webjars/bootstrap@3.3.7?type=jar"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["as well as adding new ",(0,r.jsx)(n.strong,{children:"dependencies"})," into the tree"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/aopalliance/aopalliance@1.0?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.hamcrest/hamcrest-core@1.3?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/junit/junit@4.12?type=jar"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["however, we are also seeing the following ",(0,r.jsx)(n.strong,{children:"dependencies"})," without any mention in the ",(0,r.jsx)(n.strong,{children:"component"})," section"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/com.google.guava/guava@18.0?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/commons-io/commons-io@LATEST?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.apache.commons/commons-lang3@3.4?type=jar"]}),"\n",(0,r.jsxs)(n.li,{children:["pkg",":maven","/org.webjars/jquery@1.11.1?type=jar"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["These match the list of ",(0,r.jsx)(n.strong,{children:"dependencies"})," reported as ",(0,r.jsx)(n.strong,{children:"WARNING"}),"s in the log, confirming the issue."]}),"\n",(0,r.jsx)(n.p,{children:"We now know the pull request codebase is having a beneficial effect and providing a more detailed dependency graph. What is left to work out is why we are seeing these four dependencies in the tree with no associated component."}),"\n",(0,r.jsx)(n.h1,{id:"identity-does-it-matter",children:"Identity, Does it Matter?"}),"\n",(0,r.jsx)(n.p,{children:"Before we take a look at each of the problematic dependencies let us quickly cover how components are identified in the upstream CycloneDX codebase and in my pull request."}),"\n",(0,r.jsx)(n.p,{children:"The upstream codebase discovers its components by asking maven for those artifacts which it has resolved to be the definitive set for the build. These artifacts are then filtered based on their scope, however as we discovered in the previous post this does not follow the transitive scoping rules applied by maven, and then used to create the set of components included in the bom file. It is also important to realise that when resolving the dependency tree the upstream codebase will not include any dependencies which do not exist in the set of known components. No components will be removed, even if they do not take part in the dependency tree."}),"\n",(0,r.jsx)(n.p,{children:"In my pull request we take a slightly different approach. To discover the set of possible components we still ask maven for the definitive set of artifacts, but rely instead on maven to handle the filtering when collecting the dependency graph. At the end of the process we check the set of components and remove any which do not appear in the dependency tree. No dependencies will be removed, even if they do not have an associated component, however a warning is emitted on the console. This is the warning we are now seeing."}),"\n",(0,r.jsx)(n.p,{children:"These approaches are, essentially, tackling the discovery from opposite directions."}),"\n",(0,r.jsxs)(n.p,{children:["With the above in mind let us now take a look at the problematic artifacts and return to our trusty dependency tree graph. We can see from the ",(0,r.jsx)(n.strong,{children:"WARNING"}),"s that we should focus on two of the projects"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"xxe"})," for ",(0,r.jsx)(n.strong,{children:"guava"})," and ",(0,r.jsx)(n.strong,{children:"commons-lang3"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"webwolf"})," for ",(0,r.jsx)(n.strong,{children:"jquery"})," and ",(0,r.jsx)(n.strong,{children:"commons-io"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"a-look-at-guava",children:"A look at Guava"}),"\n",(0,r.jsxs)(n.p,{children:["The parts of the ",(0,r.jsx)(n.strong,{children:"xxe"})," dependency tree which are of interest are"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"org.owasp.webgoat.lesson:xxe:jar:v8.0.0.M15\n+- com.github.tomakehurst:wiremock:jar:2.8.0:test\n|  +- com.google.guava:guava:jar:20.0:provided\n|  +- com.flipkart.zjsonpatch:zjsonpatch:jar:0.3.0:test\n|  |  +- (com.google.guava:guava:jar:18.0:test - omitted for conflict with 20.0)\n+- org.owasp.webgoat:webgoat-container:jar:v8.0.0.M15:provided\n|  +- (com.google.guava:guava:jar:18.0:provided - omitted for conflict with 20.0)\n+- org.owasp.webgoat:webgoat-container:jar:tests:v8.0.0.M15:test\n|  +- (com.google.guava:guava:jar:18.0:test - omitted for conflict with 20.0)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["From this we can see ",(0,r.jsx)(n.strong,{children:"guava:20.0"})," has been resolved as the winner by maven, however the winning artifact is hidden beneath a ",(0,r.jsx)(n.strong,{children:"test"})," scoped artifact (we saw this in our previous issues). We can also see the artifact discovered through the transitive ",(0,r.jsx)(n.strong,{children:"compile"})," scope is being reported as ",(0,r.jsx)(n.strong,{children:"guava:18.0"}),", so while version ",(0,r.jsx)(n.strong,{children:"20.0"})," has been declared the winner we are still seeing the marker nodes report the original version of ",(0,r.jsx)(n.strong,{children:"18.0"}),". How does each version of the plugin handle this scenario?"]}),"\n",(0,r.jsxs)(n.p,{children:["The upstream code discovers ",(0,r.jsx)(n.strong,{children:"guava:20.0"})," in the set of resolved artifacts, including it in its set of known components. When creating the dependency tree it discovers ",(0,r.jsx)(n.strong,{children:"guava:18.0"}),", however decides not to include it as this version is not in the set of known components. This results in a bom which includes the ",(0,r.jsx)(n.strong,{children:"guava:20.0"})," component and a dependency graph which does not reference the ",(0,r.jsx)(n.strong,{children:"guava"})," dependency, losing the dependency relationship between ",(0,r.jsx)(n.strong,{children:"webgoat-container"})," and ",(0,r.jsx)(n.strong,{children:"guava"}),". The bom looks as follows"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<component type="library" bom-ref="pkg:maven/com.google.guava/guava@20.0?type=jar">\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In my pull request we discover ",(0,r.jsx)(n.strong,{children:"guava:20.0"})," in the set of resolved artifacts, including it as a known component. When creating the dependency tree we discover the ",(0,r.jsx)(n.strong,{children:"guava:18.0"})," dependency and include it in the tree. At the end of the process we drop components which are not mentioned in the dependency tree, in this instance the ",(0,r.jsx)(n.strong,{children:"guava:20.0"})," component, but keep the dependency relationship between ",(0,r.jsx)(n.strong,{children:"webgoat-container"})," and ",(0,r.jsx)(n.strong,{children:"guava:18.0"}),", which is a missing component. The bom looks as follows"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<dependency ref="pkg:maven/org.owasp.webgoat/webgoat-container@v8.0.0.M15?type=jar">\n  <dependency ref="pkg:maven/com.google.guava/guava@18.0?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/com.google.guava/guava@18.0?type=jar"/>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"a-look-at-commons-lang3",children:"A look at commons-lang3"}),"\n",(0,r.jsxs)(n.p,{children:["The parts of the ",(0,r.jsx)(n.strong,{children:"xxe"})," dependency tree which are of interest are"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"org.owasp.webgoat.lesson:xxe:jar:v8.0.0.M15\n+- com.github.tomakehurst:wiremock:jar:2.8.0:test\n|  +- org.apache.commons:commons-lang3:jar:3.6:provided\n|  \\- com.github.jknack:handlebars:jar:4.0.6:test\n|     +- (org.apache.commons:commons-lang3:jar:3.1:test - omitted for conflict with 3.6)\n+- org.owasp.webgoat:webgoat-container:jar:v8.0.0.M15:provided\n|  +- (org.apache.commons:commons-lang3:jar:3.4:provided - omitted for conflict with 3.6)\n+- org.owasp.webgoat:webgoat-container:jar:tests:v8.0.0.M15:test\n|  +- (org.apache.commons:commons-lang3:jar:3.4:test - omitted for conflict with 3.6)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can see from the above that the ",(0,r.jsx)(n.strong,{children:"commons-lang3"})," artifact suffers from the same problem as the ",(0,r.jsx)(n.strong,{children:"guava"})," artifact, with the artifact identified through the transitive ",(0,r.jsx)(n.strong,{children:"compile"})," scope having a version of ",(0,r.jsx)(n.strong,{children:"3.4"})," while the resolved winner has a version of ",(0,r.jsx)(n.strong,{children:"3.6"})," but is hidden beneath a ",(0,r.jsx)(n.strong,{children:"test"})," scoped artifact. We can also see there is a third version being referenced beneath the ",(0,r.jsx)(n.strong,{children:"test"})," scoped artifact, ",(0,r.jsx)(n.strong,{children:"commons-lang3:3.1"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The upstream bom looks as follows"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<component type="library" bom-ref="pkg:maven/org.apache.commons/commons-lang3@3.6?type=jar">\n'})}),"\n",(0,r.jsx)(n.p,{children:"The bom from my pull request looks as follows"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<dependency ref="pkg:maven/org.owasp.webgoat/webgoat-container@v8.0.0.M15?type=jar">\n  <dependency ref="pkg:maven/org.apache.commons/commons-lang3@3.4?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/org.apache.commons/commons-lang3@3.4?type=jar"/>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"a-look-at-jquery",children:"A look at jquery"}),"\n",(0,r.jsxs)(n.p,{children:["The parts of the ",(0,r.jsx)(n.strong,{children:"webwolf"})," dependency tree which are of interest are"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"org.owasp.webgoat:webwolf:jar:v8.0.0.M15\n+- org.webjars:bootstrap:jar:3.3.7:compile\n|  \\- (org.webjars:jquery:jar:1.11.1:compile - omitted for conflict with 3.2.1)\n+- org.webjars:jquery:jar:3.2.1:compile\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This scenario is slightly different from the previous ones in that the resolved component is not hidden behind a ",(0,r.jsx)(n.strong,{children:"test"})," scoped artifact. We can see from the above that we have two artifacts being discovered within the transitive ",(0,r.jsx)(n.strong,{children:"compile"})," scope, ",(0,r.jsx)(n.strong,{children:"jquery:3.2.1"})," and ",(0,r.jsx)(n.strong,{children:"jquery:1.11.1"}),". Version ",(0,r.jsx)(n.strong,{children:"3.2.1"})," is the resolved winner and version ",(0,r.jsx)(n.strong,{children:"1.11.1"})," is the marker node for an artifact which lost the resolution process. How does each version of the plugin handle this scenario?"]}),"\n",(0,r.jsxs)(n.p,{children:["The upstream code discovers ",(0,r.jsx)(n.strong,{children:"jquery:3.2.1"})," in the set of resolved artifacts, including it in its set of known components. When creating the dependency tree it discovers both ",(0,r.jsx)(n.strong,{children:"jquery:3.2.1"})," and ",(0,r.jsx)(n.strong,{children:"jquery:1.11.1"}),", including ",(0,r.jsx)(n.strong,{children:"3.2.1"})," in the tree but deciding not to include ",(0,r.jsx)(n.strong,{children:"1.11.1"})," as this does not match a known component. This results in a bom which includes the ",(0,r.jsx)(n.strong,{children:"jquery:3.2.1"})," component and the dependency relationship between ",(0,r.jsx)(n.strong,{children:"webwolf"})," and ",(0,r.jsx)(n.strong,{children:"jquery"})," but loses the dependency relationship between ",(0,r.jsx)(n.strong,{children:"bootstrap"})," and ",(0,r.jsx)(n.strong,{children:"jquery"}),". The bom looks as follows"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<component type="library" bom-ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar">\n\n<dependency ref="pkg:maven/org.owasp.webgoat/webwolf@v8.0.0.M15?type=jar">\n  <dependency ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar"/>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In my pull request we discover ",(0,r.jsx)(n.strong,{children:"jquery:3.2.1"})," in the set of resolved artifacts, including it as a known component. When creating the dependency tree we discover both ",(0,r.jsx)(n.strong,{children:"jquery:3.2.1"})," and ",(0,r.jsx)(n.strong,{children:"jquery:1.11.1"}),", including both in the tree. This results in a bom which includes the ",(0,r.jsx)(n.strong,{children:"jquery:3.2.1"})," component and the dependency relationship between ",(0,r.jsx)(n.strong,{children:"webwolf"})," and ",(0,r.jsx)(n.strong,{children:"jquery"}),". The bom also keeps the dependency relationship between ",(0,r.jsx)(n.strong,{children:"bootstrap"})," and ",(0,r.jsx)(n.strong,{children:"jquery:1.11.1"}),", which is a missing component. The bom looks as follows"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<component type="library" bom-ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar">\n\n<dependency ref="pkg:maven/org.owasp.webgoat/webwolf@v8.0.0.M15?type=jar">\n  <dependency ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/org.webjars/bootstrap@3.3.7?type=jar">\n  <dependency ref="pkg:maven/org.webjars/jquery@1.11.1?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/org.webjars/jquery@1.11.1?type=jar"/>\n<dependency ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar"/>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"a-look-at-commons-io",children:"A look at commons-io"}),"\n",(0,r.jsxs)(n.p,{children:["The parts of the ",(0,r.jsx)(n.strong,{children:"webwolf"})," dependency tree which are of interest are"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"org.owasp.webgoat:webwolf:jar:v8.0.0.M15\n+- commons-io:commons-io:jar:LATEST:compile\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now this scenario is very different from the previous ones. In each of the previous scenarios the dependency tree included marker nodes with versions which did not match the version resolved by maven, the first two with the resolved artifact hidden behind a ",(0,r.jsx)(n.strong,{children:"test"})," scoped artifact and the third with both artifacts discovered through the transitive ",(0,r.jsx)(n.strong,{children:"compile"})," scope. So what is going on here? It's time for a quick dive under the covers of maven!"]}),"\n",(0,r.jsxs)(n.p,{children:["Maven includes support for two ",(0,r.jsx)(n.em,{children:"metaversions"})," which can be used when specifying the version of an artifact, these are ",(0,r.jsx)(n.strong,{children:"RELEASE"})," and ",(0,r.jsx)(n.strong,{children:"LATEST"}),". These ",(0,r.jsx)(n.em,{children:"metaversions"})," have specific meanings when resolving artifacts within a pom, these are"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RELEASE"}),": represents the latest non-snapshot version of the artifact within a repository"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"LATEST"}),": represents the latest version of the artifact within a repository, which includes both released and snapshot versions"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Using either ",(0,r.jsx)(n.strong,{children:"RELEASE"})," or ",(0,r.jsx)(n.strong,{children:"LATEST"})," in a build breaks reproducibility. Thankfully maven is now issuing the following deprecation ",(0,r.jsx)(n.strong,{children:"WARNING"})," when encountering these ",(0,r.jsx)(n.em,{children:"metaversions"}),", which means support for these versions should be removed at some point in the future."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[WARNING] 'dependencies.dependency.version' for commons-io:commons-io:jar is either LATEST or RELEASE (both of them are being deprecated)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["When maven encounters either of these ",(0,r.jsx)(n.em,{children:"metaversions"})," it will resolve the artifact to a specific version based on the above meanings. In our case, at least as of today, maven will resolve ",(0,r.jsxs)(n.strong,{children:["commons-io",":LATEST"]})," to ",(0,r.jsx)(n.strong,{children:"commons-io:2.11.0"}),". How does each version of the plugin handle this scenario?"]}),"\n",(0,r.jsxs)(n.p,{children:["The upstream code discovers ",(0,r.jsx)(n.strong,{children:"commons-io:2.11.0"})," in the set of resolved artifacts, including it in its set of known components. When creating the dependency tree it discovers ",(0,r.jsxs)(n.strong,{children:["commons-io",":LATEST"]}),", however decides not to include it as this version is not in the set of known components. This results in a bom which includes the ",(0,r.jsx)(n.strong,{children:"commons-io:2.11.0"})," component and a dependency graph which does not reference the ",(0,r.jsx)(n.strong,{children:"common-io"})," dependency, losing the dependency relationship between ",(0,r.jsx)(n.strong,{children:"webwolf"})," and ",(0,r.jsx)(n.strong,{children:"commons-io"}),". The bom looks as follows"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<component type="library" bom-ref="pkg:maven/commons-io/commons-io@2.11.0?type=jar">\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In my pull request we discover ",(0,r.jsx)(n.strong,{children:"commons-io:2.11.0"})," in the set of resolved artifacts, including it as a known component. When creating the dependency tree we discover the ",(0,r.jsxs)(n.strong,{children:["commons-io",":LATEST"]})," dependency and include it in the tree. At the end of the process we drop components which are not mentioned in the dependency tree, in this instance the ",(0,r.jsx)(n.strong,{children:"commons-io:2.11.0"})," component, but keep the dependency relationship between ",(0,r.jsx)(n.strong,{children:"webwolf"})," and ",(0,r.jsxs)(n.strong,{children:["commons-io",":LATEST"]}),", which is a missing component. The bom looks as follows"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<dependency ref="pkg:maven/org.owasp.webgoat/webwolf@v8.0.0.M15?type=jar">\n  <dependency ref="pkg:maven/commons-io/commons-io@LATEST?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/commons-io/commons-io@LATEST?type=jar"/>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"summarising-the-issues",children:"Summarising the issues"}),"\n",(0,r.jsx)(n.p,{children:"We have three different scenarios here, however each has the same root cause. Maven is returning a dependency graph which includes marker nodes referencing the original artifact versions and not the versions resolved within the context of the build. These marker nodes have a different identity to the resolved dependencies and are, therefore, treated separately. As we would expect, identity does matter!"}),"\n",(0,r.jsx)(n.p,{children:"With the upstream codebase we see the resolved components being included in the bom, but with certain dependency relationships missing from the dependency tree."}),"\n",(0,r.jsx)(n.p,{children:"With my pull request we see some missing components from the bom, but with all dependency relationships included in the dependency tree. The problem is that some of these relationships reference dependencies with their original version and not the version resolved by maven."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The issues we are seeing do not happen with dependencies which have their version managed, if we look at the node for a managed dependency we can see the version of the marker has been updated"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"org.slf4j:slf4j-api:1.7.25:compile    (org.slf4j:slf4j-api:jar:1.7.25:compile - version managed from 1.6.6; omitted for duplicate)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this case the version of the marker node has been updated from ",(0,r.jsx)(n.strong,{children:"1.6.6"})," to ",(0,r.jsx)(n.strong,{children:"1.7.25"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Unfortunately this additional information is not available to us other than through the ",(0,r.jsx)(n.strong,{children:"toNodeString"})," method on the ",(0,r.jsx)(n.strong,{children:"VerboseDependencyNode"})," class, that is unless we delve under the covers and work on the internal ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.a,{href:"https://wiki.eclipse.org/Aether",title:"Eclipse Aether website",children:"aether"})})," dependency tree which does contain a data map including this information."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"now-for-the-solution",children:"Now for the solution"}),"\n",(0,r.jsx)(n.p,{children:"Now we have identified a root cause there is an obvious solution. We know maven is not updating the versions for some marker nodes, leaving them with their original version, so we need to handle this aspect. We need to track the versions of the resolved artifacts and, when creating the dependency graph, ensure all dependency versions reference the resolved version of the artifact. Thankfully this is a straight forward update to the codebase."}),"\n",(0,r.jsx)(n.p,{children:"Now that we have a working solution how does this look for each component?"}),"\n",(0,r.jsx)(n.h3,{id:"recap-and-solution-for-guava",children:"Recap and Solution for guava"}),"\n",(0,r.jsx)(n.p,{children:"From our earlier discussion we saw the upstream plugin had identified the correct guava version for the component, but had lost all dependency relationships, and my pull request had kept the dependency relationships but had lost the component as it was referring to the original version of the artifact. What do we see now in the bom file?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<component type="library" bom-ref="pkg:maven/com.google.guava/guava@20.0?type=jar">\n\n<dependency ref="pkg:maven/org.owasp.webgoat/webgoat-container@v8.0.0.M15?type=jar">\n  <dependency ref="pkg:maven/com.google.guava/guava@20.0?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/com.google.guava/guava@20.0?type=jar"/>\n'})}),"\n",(0,r.jsx)(n.p,{children:"Fantastic, we now see a component with the version resolved by maven and all the dependency relationships we were expecting!"}),"\n",(0,r.jsx)(n.h3,{id:"recap-and-solution-for-commons-lang3",children:"Recap and Solution for commons-lang3"}),"\n",(0,r.jsx)(n.p,{children:"From our earlier discussion we saw a similar issue with commons-lang3. The upstream plugin had identified the correct commons-lang3 version for the component, but had lost all dependency relationships, and my pull request had kept the dependency relationships but had lost the component as it was using the original version of the artifact. What do we see now in the bom file?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<component type="library" bom-ref="pkg:maven/org.apache.commons/commons-lang3@3.6?type=jar">\n\n<dependency ref="pkg:maven/org.owasp.webgoat/webgoat-container@v8.0.0.M15?type=jar">\n  <dependency ref="pkg:maven/org.apache.commons/commons-lang3@3.6?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/org.apache.commons/commons-lang3@3.6?type=jar"/>\n'})}),"\n",(0,r.jsx)(n.p,{children:"We are now two for two, we again see the component with the resolved version and also see all the dependency relationships!"}),"\n",(0,r.jsx)(n.h3,{id:"recap-and-solution-for-jquery",children:"Recap and Solution for jquery"}),"\n",(0,r.jsxs)(n.p,{children:["In our earlier discussion we had identified a slightly different scenario with jquery, as the ",(0,r.jsx)(n.strong,{children:"compile"})," scoped artifacts included both the resolved version (3.2.1) and an older version (1.11.1). Both plugins had identified the component and included the dependency relationship between ",(0,r.jsx)(n.strong,{children:"webwolf"})," and ",(0,r.jsx)(n.strong,{children:"jquery"}),", however the upstream plugin had lost the dependency relationship between ",(0,r.jsx)(n.strong,{children:"bootstrap"})," and ",(0,r.jsx)(n.strong,{children:"jquery"})," whereas my pull request included the dependency but referenced the original version. What do we now see in the bom file?"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<component type="library" bom-ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar">\n\n<dependency ref="pkg:maven/org.owasp.webgoat/webwolf@v8.0.0.M15?type=jar">\n  <dependency ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/org.webjars/bootstrap@3.3.7?type=jar">\n  <dependency ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/org.webjars/jquery@3.2.1?type=jar"/>\n'})}),"\n",(0,r.jsx)(n.p,{children:"We are on a roll, and are now three for three. We can see all the expected dependency relationships are present with all the relationships referencing the resolved version!"}),"\n",(0,r.jsx)(n.h3,{id:"recap-and-solution-for-commons-io",children:"Recap and Solution for commons-io"}),"\n",(0,r.jsxs)(n.p,{children:["Now we come to our final scenario and the use of ",(0,r.jsx)(n.em,{children:"metaversions"}),", can we make it four for four?"]}),"\n",(0,r.jsxs)(n.p,{children:["In our earlier discussion we covered the use and meaning of ",(0,r.jsx)(n.em,{children:"metaversions"})," within maven dependencies and saw the upstream plugin had correctly identified the resolved component, but had no dependency relationships, whereas my pull request identified the dependency relationships using the ",(0,r.jsx)(n.strong,{children:"LATEST"})," ",(0,r.jsx)(n.em,{children:"metaversion"})," but did not identify the component. What do we now see in the bom file?"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<component type="library" bom-ref="pkg:maven/commons-io/commons-io@2.11.0?type=jar">\n\n<dependency ref="pkg:maven/org.owasp.webgoat/webwolf@v8.0.0.M15?type=jar">\n  <dependency ref="pkg:maven/commons-io/commons-io@2.11.0?type=jar"/>\n</dependency>\n<dependency ref="pkg:maven/commons-io/commons-io@2.11.0?type=jar"/>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Brilliant, the component and all expected dependency relationships are present, with each referencing the resolved version and not the ",(0,r.jsx)(n.em,{children:"metaversion"}),"!"]}),"\n",(0,r.jsx)(n.p,{children:"We have done it, we are now four for four!"}),"\n",(0,r.jsx)(n.h1,{id:"conclusions",children:"Conclusions"}),"\n",(0,r.jsx)(n.p,{children:"With this latest issue now resolved I feel we have a much better solution for generating SBOMs for maven projects. We know these bom files will contain all dependency relationships returned via maven, and now this version mismatch issue has been addressed we can be confident we will only include entries for resolved artifacts."}),"\n",(0,r.jsxs)(n.p,{children:["My original pull request has been updated to include the fix for these issues, in addition to the issues covered in the previous post (",(0,r.jsx)(n.a,{href:"/blog/2022/12/09/cyclonedx-maven-plugin-adventure",children:"An Adventure with the CycloneDX Maven Plugin"}),"), and has now been merged into the upstream codebase with help from Herv\xe9. I'm looking forward to having this released in the next ",(0,r.jsx)(n.a,{href:"https://github.com/CycloneDX/cyclonedx-maven-plugin",title:"The CycloneDX Maven Plugin GitHub repository",children:"CycloneDX Maven Plugin"})," release and being able to use this in earnest as part of our effort to secure our Software Supply Chain. With any luck this can also be of benefit to your efforts, at least I hope that proves to be the case."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8047:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/02/10/cyclonedx-maven-plugin-adventure-continues","editUrl":"https://github.com/trustification/trustification.github.io/tree/main/blog/2023-02-10-cyclonedx-maven-plugin-adventure-continues.md","source":"@site/blog/2023-02-10-cyclonedx-maven-plugin-adventure-continues.md","title":"Continuing the Adventure with the CycloneDX Maven Plugin","description":"My investigation into the CycloneDX Maven Plugin began back in November/December 2022 with the intent of integrating the plugin into the Quarkus build process to generate Software Bill of Materials (SBOMs) for the project. I quickly discovered issues in the plugin and raised these with the maintainer early in December, writing a blog post (An Adventure with the CycloneDX Maven Plugin) to help clarify each issue. I finally opened a pull request in early January to move the conversation forward and this is where our story continues .....","date":"2023-02-10T00:00:00.000Z","tags":[{"inline":true,"label":"cyclonedx","permalink":"/blog/tags/cyclonedx"}],"readingTime":18.22,"hasTruncateMarker":true,"authors":[{"name":"Kevin Conner","title":"Maintainer","url":"https://github.com/knrc","imageURL":"https://github.com/knrc.png","key":"kevinconner","page":null}],"frontMatter":{"title":"Continuing the Adventure with the CycloneDX Maven Plugin","authors":"kevinconner","tags":["cyclonedx"]},"unlisted":false,"prevItem":{"title":"Signing elf binaries, or not?! Lessons learned.","permalink":"/blog/2023/02/13/elfsign"},"nextItem":{"title":"The Update Framework (TUF)","permalink":"/blog/2023/01/31/tuf"}}')},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);